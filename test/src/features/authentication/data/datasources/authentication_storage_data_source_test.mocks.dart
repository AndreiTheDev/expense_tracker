// Mocks generated by Mockito 5.4.4 from annotations
// in expense_tracker_app_bloc/test/src/features/authentication/data/datasources/authentication_storage_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:io' as _i8;
import 'dart:typed_data' as _i7;

import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:firebase_storage/firebase_storage.dart' as _i3;
import 'package:firebase_storage_platform_interface/firebase_storage_platform_interface.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseApp_0 extends _i1.SmartFake implements _i2.FirebaseApp {
  _FakeFirebaseApp_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_1 extends _i1.SmartFake implements Duration {
  _FakeDuration_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReference_2 extends _i1.SmartFake implements _i3.Reference {
  _FakeReference_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseStorage_3 extends _i1.SmartFake
    implements _i3.FirebaseStorage {
  _FakeFirebaseStorage_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFullMetadata_4 extends _i1.SmartFake implements _i4.FullMetadata {
  _FakeFullMetadata_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeListResult_5 extends _i1.SmartFake implements _i3.ListResult {
  _FakeListResult_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUploadTask_6 extends _i1.SmartFake implements _i3.UploadTask {
  _FakeUploadTask_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDownloadTask_7 extends _i1.SmartFake implements _i3.DownloadTask {
  _FakeDownloadTask_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseStorage extends _i1.Mock implements _i3.FirebaseStorage {
  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_0(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeFirebaseApp_0(
          this,
          Invocation.getter(#app),
        ),
      ) as _i2.FirebaseApp);

  @override
  set app(_i2.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get bucket => (super.noSuchMethod(
        Invocation.getter(#bucket),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#bucket),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#bucket),
        ),
      ) as String);

  @override
  set bucket(String? _bucket) => super.noSuchMethod(
        Invocation.setter(
          #bucket,
          _bucket,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Duration get maxOperationRetryTime => (super.noSuchMethod(
        Invocation.getter(#maxOperationRetryTime),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#maxOperationRetryTime),
        ),
        returnValueForMissingStub: _FakeDuration_1(
          this,
          Invocation.getter(#maxOperationRetryTime),
        ),
      ) as Duration);

  @override
  Duration get maxUploadRetryTime => (super.noSuchMethod(
        Invocation.getter(#maxUploadRetryTime),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#maxUploadRetryTime),
        ),
        returnValueForMissingStub: _FakeDuration_1(
          this,
          Invocation.getter(#maxUploadRetryTime),
        ),
      ) as Duration);

  @override
  Duration get maxDownloadRetryTime => (super.noSuchMethod(
        Invocation.getter(#maxDownloadRetryTime),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#maxDownloadRetryTime),
        ),
        returnValueForMissingStub: _FakeDuration_1(
          this,
          Invocation.getter(#maxDownloadRetryTime),
        ),
      ) as Duration);

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i3.Reference ref([String? path]) => (super.noSuchMethod(
        Invocation.method(
          #ref,
          [path],
        ),
        returnValue: _FakeReference_2(
          this,
          Invocation.method(
            #ref,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeReference_2(
          this,
          Invocation.method(
            #ref,
            [path],
          ),
        ),
      ) as _i3.Reference);

  @override
  _i3.Reference refFromURL(String? url) => (super.noSuchMethod(
        Invocation.method(
          #refFromURL,
          [url],
        ),
        returnValue: _FakeReference_2(
          this,
          Invocation.method(
            #refFromURL,
            [url],
          ),
        ),
        returnValueForMissingStub: _FakeReference_2(
          this,
          Invocation.method(
            #refFromURL,
            [url],
          ),
        ),
      ) as _i3.Reference);

  @override
  void setMaxOperationRetryTime(Duration? time) => super.noSuchMethod(
        Invocation.method(
          #setMaxOperationRetryTime,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMaxUploadRetryTime(Duration? time) => super.noSuchMethod(
        Invocation.method(
          #setMaxUploadRetryTime,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMaxDownloadRetryTime(Duration? time) => super.noSuchMethod(
        Invocation.method(
          #setMaxDownloadRetryTime,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> useEmulator({
    required String? host,
    required int? port,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #useEmulator,
          [],
          {
            #host: host,
            #port: port,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> useStorageEmulator(
    String? host,
    int? port, {
    bool? automaticHostMapping = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #useStorageEmulator,
          [
            host,
            port,
          ],
          {#automaticHostMapping: automaticHostMapping},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [Reference].
///
/// See the documentation for Mockito's code generation for more information.
class MockReference extends _i1.Mock implements _i3.Reference {
  @override
  _i3.FirebaseStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFirebaseStorage_3(
          this,
          Invocation.getter(#storage),
        ),
        returnValueForMissingStub: _FakeFirebaseStorage_3(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i3.FirebaseStorage);

  @override
  String get bucket => (super.noSuchMethod(
        Invocation.getter(#bucket),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#bucket),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#bucket),
        ),
      ) as String);

  @override
  String get fullPath => (super.noSuchMethod(
        Invocation.getter(#fullPath),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#fullPath),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#fullPath),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i3.Reference get root => (super.noSuchMethod(
        Invocation.getter(#root),
        returnValue: _FakeReference_2(
          this,
          Invocation.getter(#root),
        ),
        returnValueForMissingStub: _FakeReference_2(
          this,
          Invocation.getter(#root),
        ),
      ) as _i3.Reference);

  @override
  _i3.Reference child(String? path) => (super.noSuchMethod(
        Invocation.method(
          #child,
          [path],
        ),
        returnValue: _FakeReference_2(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeReference_2(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
      ) as _i3.Reference);

  @override
  _i6.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<String> getDownloadURL() => (super.noSuchMethod(
        Invocation.method(
          #getDownloadURL,
          [],
        ),
        returnValue: _i6.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #getDownloadURL,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #getDownloadURL,
            [],
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<_i4.FullMetadata> getMetadata() => (super.noSuchMethod(
        Invocation.method(
          #getMetadata,
          [],
        ),
        returnValue: _i6.Future<_i4.FullMetadata>.value(_FakeFullMetadata_4(
          this,
          Invocation.method(
            #getMetadata,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.FullMetadata>.value(_FakeFullMetadata_4(
          this,
          Invocation.method(
            #getMetadata,
            [],
          ),
        )),
      ) as _i6.Future<_i4.FullMetadata>);

  @override
  _i6.Future<_i3.ListResult> list([_i4.ListOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #list,
          [options],
        ),
        returnValue: _i6.Future<_i3.ListResult>.value(_FakeListResult_5(
          this,
          Invocation.method(
            #list,
            [options],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.ListResult>.value(_FakeListResult_5(
          this,
          Invocation.method(
            #list,
            [options],
          ),
        )),
      ) as _i6.Future<_i3.ListResult>);

  @override
  _i6.Future<_i3.ListResult> listAll() => (super.noSuchMethod(
        Invocation.method(
          #listAll,
          [],
        ),
        returnValue: _i6.Future<_i3.ListResult>.value(_FakeListResult_5(
          this,
          Invocation.method(
            #listAll,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.ListResult>.value(_FakeListResult_5(
          this,
          Invocation.method(
            #listAll,
            [],
          ),
        )),
      ) as _i6.Future<_i3.ListResult>);

  @override
  _i6.Future<_i7.Uint8List?> getData([int? maxSize = 10485760]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getData,
          [maxSize],
        ),
        returnValue: _i6.Future<_i7.Uint8List?>.value(),
        returnValueForMissingStub: _i6.Future<_i7.Uint8List?>.value(),
      ) as _i6.Future<_i7.Uint8List?>);

  @override
  _i3.UploadTask putData(
    _i7.Uint8List? data, [
    _i4.SettableMetadata? metadata,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #putData,
          [
            data,
            metadata,
          ],
        ),
        returnValue: _FakeUploadTask_6(
          this,
          Invocation.method(
            #putData,
            [
              data,
              metadata,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeUploadTask_6(
          this,
          Invocation.method(
            #putData,
            [
              data,
              metadata,
            ],
          ),
        ),
      ) as _i3.UploadTask);

  @override
  _i3.UploadTask putBlob(
    dynamic blob, [
    _i4.SettableMetadata? metadata,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #putBlob,
          [
            blob,
            metadata,
          ],
        ),
        returnValue: _FakeUploadTask_6(
          this,
          Invocation.method(
            #putBlob,
            [
              blob,
              metadata,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeUploadTask_6(
          this,
          Invocation.method(
            #putBlob,
            [
              blob,
              metadata,
            ],
          ),
        ),
      ) as _i3.UploadTask);

  @override
  _i3.UploadTask putFile(
    _i8.File? file, [
    _i4.SettableMetadata? metadata,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #putFile,
          [
            file,
            metadata,
          ],
        ),
        returnValue: _FakeUploadTask_6(
          this,
          Invocation.method(
            #putFile,
            [
              file,
              metadata,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeUploadTask_6(
          this,
          Invocation.method(
            #putFile,
            [
              file,
              metadata,
            ],
          ),
        ),
      ) as _i3.UploadTask);

  @override
  _i3.UploadTask putString(
    String? data, {
    _i4.PutStringFormat? format = _i4.PutStringFormat.raw,
    _i4.SettableMetadata? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putString,
          [data],
          {
            #format: format,
            #metadata: metadata,
          },
        ),
        returnValue: _FakeUploadTask_6(
          this,
          Invocation.method(
            #putString,
            [data],
            {
              #format: format,
              #metadata: metadata,
            },
          ),
        ),
        returnValueForMissingStub: _FakeUploadTask_6(
          this,
          Invocation.method(
            #putString,
            [data],
            {
              #format: format,
              #metadata: metadata,
            },
          ),
        ),
      ) as _i3.UploadTask);

  @override
  _i6.Future<_i4.FullMetadata> updateMetadata(_i4.SettableMetadata? metadata) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMetadata,
          [metadata],
        ),
        returnValue: _i6.Future<_i4.FullMetadata>.value(_FakeFullMetadata_4(
          this,
          Invocation.method(
            #updateMetadata,
            [metadata],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.FullMetadata>.value(_FakeFullMetadata_4(
          this,
          Invocation.method(
            #updateMetadata,
            [metadata],
          ),
        )),
      ) as _i6.Future<_i4.FullMetadata>);

  @override
  _i3.DownloadTask writeToFile(_i8.File? file) => (super.noSuchMethod(
        Invocation.method(
          #writeToFile,
          [file],
        ),
        returnValue: _FakeDownloadTask_7(
          this,
          Invocation.method(
            #writeToFile,
            [file],
          ),
        ),
        returnValueForMissingStub: _FakeDownloadTask_7(
          this,
          Invocation.method(
            #writeToFile,
            [file],
          ),
        ),
      ) as _i3.DownloadTask);
}

/// A class which mocks [ListResult].
///
/// See the documentation for Mockito's code generation for more information.
class MockListResult extends _i1.Mock implements _i3.ListResult {
  @override
  _i3.FirebaseStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFirebaseStorage_3(
          this,
          Invocation.getter(#storage),
        ),
        returnValueForMissingStub: _FakeFirebaseStorage_3(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i3.FirebaseStorage);

  @override
  List<_i3.Reference> get items => (super.noSuchMethod(
        Invocation.getter(#items),
        returnValue: <_i3.Reference>[],
        returnValueForMissingStub: <_i3.Reference>[],
      ) as List<_i3.Reference>);

  @override
  List<_i3.Reference> get prefixes => (super.noSuchMethod(
        Invocation.getter(#prefixes),
        returnValue: <_i3.Reference>[],
        returnValueForMissingStub: <_i3.Reference>[],
      ) as List<_i3.Reference>);
}
